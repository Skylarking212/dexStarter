{"ast":null,"code":"var _jsxFileName = \"/Users/olivertaylor/Downloads/Work/Foundation Swap/dexStarter/dex/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { configureChains, mainnet, WagmiConfig, createClient } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst https = require(\"https\");\nconst projectId = \"<API-KEY>\";\nconst data = JSON.stringify({\n  jsonrpc: \"2.0\",\n  method: \"eth_blockNumber\",\n  params: [],\n  id: 1\n});\nconst options = {\n  host: \"mainnet.infura.io\",\n  port: 443,\n  path: \"/v3/\" + projectId,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n};\nconst req = https.request(options, res => {\n  console.log(`statusCode: ${res.statusCode}`);\n  res.on(\"data\", d => {\n    process.stdout.write(d);\n  });\n});\nreq.on(\"error\", error => {\n  console.error(error);\n});\nreq.write(data);\nreq.end();\nconst {\n  provider,\n  webSocketProvider\n} = configureChains([mainnet], [publicProvider()]);\nconst client = createClient({\n  autoConnect: true,\n  provider,\n  webSocketProvider\n});\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(WagmiConfig, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","BrowserRouter","configureChains","mainnet","WagmiConfig","createClient","publicProvider","https","require","projectId","data","JSON","stringify","jsonrpc","method","params","id","options","host","port","path","headers","req","request","res","console","log","statusCode","on","d","process","stdout","write","error","end","provider","webSocketProvider","client","autoConnect","root","createRoot","document","getElementById","render"],"sources":["/Users/olivertaylor/Downloads/Work/Foundation Swap/dexStarter/dex/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { configureChains, mainnet, WagmiConfig, createClient } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\nconst https = require(\"https\");\nconst projectId = \"<API-KEY>\";\nconst data = JSON.stringify({\n  jsonrpc: \"2.0\",\n  method: \"eth_blockNumber\",\n  params: [],\n  id: 1,\n});\nconst options = {\n  host: \"mainnet.infura.io\",\n  port: 443,\n  path: \"/v3/\" + projectId,\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n};\nconst req = https.request(options, (res) => {\n  console.log(`statusCode: ${res.statusCode}`);\n\n  res.on(\"data\", (d) => {\n    process.stdout.write(d);\n  });\n});\n\nreq.on(\"error\", (error) => {\n  console.error(error);\n});\n\nreq.write(data);\nreq.end();\n\nconst { provider, webSocketProvider } = configureChains(\n[mainnet],\n[publicProvider()]\n);\n\nconst client = createClient({\n  autoConnect: true,\n  provider,\n  webSocketProvider,\n});\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <WagmiConfig client={client}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </WagmiConfig>\n  </React.StrictMode>\n);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,eAAe,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,QAAQ,OAAO;AAC3E,SAASC,cAAc,QAAQ,wBAAwB;AAAC;AAExD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,SAAS,GAAG,WAAW;AAC7B,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;EAC1BC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE,iBAAiB;EACzBC,MAAM,EAAE,EAAE;EACVC,EAAE,EAAE;AACN,CAAC,CAAC;AACF,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM,GAAGX,SAAS;EACxBK,MAAM,EAAE,MAAM;EACdO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC;AACD,MAAMC,GAAG,GAAGf,KAAK,CAACgB,OAAO,CAACN,OAAO,EAAGO,GAAG,IAAK;EAC1CC,OAAO,CAACC,GAAG,CAAE,eAAcF,GAAG,CAACG,UAAW,EAAC,CAAC;EAE5CH,GAAG,CAACI,EAAE,CAAC,MAAM,EAAGC,CAAC,IAAK;IACpBC,OAAO,CAACC,MAAM,CAACC,KAAK,CAACH,CAAC,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFP,GAAG,CAACM,EAAE,CAAC,OAAO,EAAGK,KAAK,IAAK;EACzBR,OAAO,CAACQ,KAAK,CAACA,KAAK,CAAC;AACtB,CAAC,CAAC;AAEFX,GAAG,CAACU,KAAK,CAACtB,IAAI,CAAC;AACfY,GAAG,CAACY,GAAG,EAAE;AAET,MAAM;EAAEC,QAAQ;EAAEC;AAAkB,CAAC,GAAGlC,eAAe,CACvD,CAACC,OAAO,CAAC,EACT,CAACG,cAAc,EAAE,CAAC,CACjB;AAED,MAAM+B,MAAM,GAAGhC,YAAY,CAAC;EAC1BiC,WAAW,EAAE,IAAI;EACjBH,QAAQ;EACRC;AACF,CAAC,CAAC;AAGF,MAAMG,IAAI,GAAGxC,QAAQ,CAACyC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACT,QAAC,KAAK,CAAC,UAAU;EAAA,uBACf,QAAC,WAAW;IAAC,MAAM,EAAEN,MAAO;IAAA,uBAC1B,QAAC,aAAa;MAAA,uBACZ,QAAC,GAAG;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACO;IAAA;IAAA;IAAA;EAAA;AACF;EAAA;EAAA;EAAA;AAAA,QACC,CACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}